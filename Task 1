


import java.util.Scanner;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class PasswordStrengthChecker {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Enter a password to check its strength: ");
        String password = scanner.nextLine();
        
        int strengthScore = calculateStrength(password);
        String strength = evaluateStrength(strengthScore);
        
        System.out.println("Password Strength: " + strength);
        scanner.close();
    }

    public static int calculateStrength(String password) {
        int score = 0;

        // Length check
        int length = password.length();
        if (length >= 8) {
            score += 2;
        } else if (length >= 5) {
            score += 1;
        }

        // Complexity checks
        if (hasLowerCase(password)) score++;
        if (hasUpperCase(password)) score++;
        if (hasDigit(password)) score++;
        if (hasSpecialCharacter(password)) score++;
        
        // Uniqueness check
        if (hasNoRepeatingSequences(password)) score++;

        return score;
    }

    public static boolean hasLowerCase(String password) {
        return !password.equals(password.toUpperCase());
    }

    public static boolean hasUpperCase(String password) {
        return !password.equals(password.toLowerCase());
    }

    public static boolean hasDigit(String password) {
        return password.matches(".*\\d.*");
    }

    public static boolean hasSpecialCharacter(String password) {
        return password.matches(".*[!@#$%^&*()\\-_=+{};:,<.>].*");
    }

    public static boolean hasNoRepeatingSequences(String password) {
        for (int i = 0; i < password.length() - 2; i++) {
            String sequence = password.substring(i, i + 3);
            if (password.substring(i + 3).contains(sequence)) {
                return false;
            }
        }
        return true;
    }

    public static String evaluateStrength(int score) {
        if (score >= 6) {
            return "Strong";
        } else if (score >= 4) {
            return "Medium";
        } else {
            return "Weak";
        }
    }
}
